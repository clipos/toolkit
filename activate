# SPDX-License-Identifier: LGPL-2.1-or-later
# Copyright Â© 2017 ANSSI. All rights reserved.

# Source this script to add 'cosmk' to your $PATH and enable Bash or Zsh
# completion.

# DISCLAIMER: Only Bash and Zsh shells are supported.

# Development guidelines for this file:
#   1. Do NOT call "exit" as this would close the user interactive shell
#      session. Use return!
#   2. Stay POSIX sh compliant for this file (with the exception of the "local"
#      keyword which is understood everywhere).
#   3. Avoid at most the use of external programs (aliases might have been
#      set in the current interactive shell session that could possibly break
#      the expected behavior of some commands).
#   4. Use double-underscore prefixed variable and function names to avoid
#      overwriting potential variables or functions of the user interactive
#      shell.

# Identify the running shell as code will differ if it is either Bash or Zsh:
if [ -n "$ZSH_VERSION" ]; then
   __shell_type=zsh
elif [ -n "$BASH_VERSION" ]; then
   __shell_type=bash
else
    echo >&2 " [!] Sorry, this script is meant to be sourced from either a Bash or a Zsh shell."
    echo >&2 "     No other shell is supported. Aborting."
    return 1 || exit 1  # if ever this script has been called
fi

# Get the path to myself (this current file) in order to compute my location
# and infer then the path to the toolkit directory.
case "$__shell_type" in
    bash)   __path_to_myself="${BASH_SOURCE[0]}" ;;
    zsh)    __path_to_myself="${(%):-%x}" ;;
esac
__path_to_toolkit="${__path_to_myself%/*}"
if [ "${__path_to_myself}" = "${__path_to_toolkit}" ]; then
    # if there is no slash in __path_to_myself then assume it is in the current
    # working directory:
    __path_to_toolkit="$(pwd)"
fi
# We can now infer the paths to the repo root and the toolkit runtime
# directory:
__path_to_repo_root="${__path_to_toolkit}/../"
__path_to_runtime_dir="${__path_to_repo_root}/run/"

__check_current_user_not_root() {
    if [ "$(id -u)" -eq 0 ]; then
        echo >&2 " [!] You should not be running this in a root interactive shell."
        echo >&2 "     Please retry with an unprivileged user."
        return 1
    fi
}

__check_not_already_in_venv() {
    if [ -n "${COSMK_ENV}" ]; then
        echo >&2 " [!] You seem to already have a cosmk environment activated. Aborting."
        return 1
    fi
}

__check_shell_umask() {
    if [ -n "${NO_UMASK_WARNING:-}" ]; then
        echo >&2 " [!] Current umask value check dismissed by request (NO_UMASK_WARNING variable set)."
        return 0
    fi

    local current_umask
    current_umask="$(umask)"
    case "${current_umask}" in
        # umask values known to cause no issues with cosmk
        0022|022|0002|002) ;;
        *)
            echo >&2 # line break
            cat >&2 <<END_OF_BANNER
  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  @                                                                         @
  @            Warning! You seem to use an unusual umask value.             @
  @                                                                         @
  @ This may lead to undefined problems when using the CLIP OS toolkit as   @
  @ all the file modes of this source tree are left unchanged when they are @
  @ exposed within SDK containers. As a consequence, some unprivileged      @
  @ programs running in these containers might encounter a "Permission      @
  @ denied" error when trying to read files from this source tree as their  @
  @ file access mode deny read/traversal for other users.                   @
  @                                                                         @
  @ Please make sure to have fetched and synchonized your source tree with  @
  @ repo with a umask value granting read and directory traversal for       @
  @ others (e.g., "umask 0022").                                            @
  @                                                                         @
  @ If you think this is not justified or you perfectly know what you are   @
  @ doing, you can proceed by setting NO_UMASK_WARNING=1 in your            @
  @ environment to circumvent this check and then reinvoke the source       @
  @ command.                                                                @
  @ Otherwise, please read carefully the section relative the developer     @
  @ environment setup in the CLIP OS toolkit documentation before           @
  @ proceeding. Thank you.                                                  @
  @                                                                         @
  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
END_OF_BANNER
            echo >&2 # line break
            return 1
            ;;
    esac
}

__check_lfs_repositories() {
    # Do not process this check if told so:
    if [ -n "${NO_GIT_LFS_WARNING:-}" ]; then
        echo >&2 " [!] Git LFS repositories check dismissed by request (NO_GIT_LFS_WARNING variable set)."
        return 0
    fi

    # Abort this check if git is not present in PATH (this source tree may have
    # been retrieved from an archive file):
    if ! type git >/dev/null 2>&1; then
        echo >&2 " [!] Git is missing in the current environment: Git LFS repositories check dismissed."
        return 0
    fi

    # Likewise, abort this check if the source tree root is not backed by repo
    # (the source tree may also have been reconstructed from an archive file):
    if ! [ -d "${__path_to_repo_root}/.repo" ]; then
        echo >&2 " [!] This source tree does not seem to be managed by repo: Git LFS repositories check dismissed."
        return 0
    fi

    # Git is present and the source tree is backed by repo. We can therefore
    # check for the good condition of the Git LFS-backed repositories:
    if ! "${__path_to_toolkit}/helpers/check-lfs-repositories.sh" --quick; then
        echo >&2 # line break
        cat >&2 <<END_OF_BANNER
  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  @                                                                         @
  @      Warning! Some Git LFS-backed repositories seem to be missing       @
  @     Git LFS objects (either downloaded or checked out in the tree).     @
  @                                                                         @
  @ You may have synchronized the CLIP OS source tree without having        @
  @ activated prior the Git LFS filters globally with the command "git lfs  @
  @ install". As a consequence, you may have synchronized partially the     @
  @ source tree as the files stored with Git LFS are still missing in the   @
  @ concerned repositories.                                                 @
  @                                                                         @
  @ Please make sure you have fetched and synchonized your source tree in a @
  @ Git LFS initialized environment. If this was not the case and if the    @
  @ advertised Git LFS endpoint is reachable, you can simply run the        @
  @ following command to finish the download of the missing Git LFS objects @
  @ and checked them out properly in the source tree:                       @
  @                                                                         @
  @   $ repo forall -g lfs -c 'git lfs install && git lfs pull'             @
  @                                                                         @
  @ If you think this is not justified or if you perfectly know what you    @
  @ are doing, you can proceed by setting NO_GIT_LFS_WARNING=1 in your      @
  @ environment to circumvent this check and then reinvoke the source       @
  @ command.                                                                @
  @ Otherwise, please read carefully the section relative the developer     @
  @ environment setup in the CLIP OS toolkit documentation before           @
  @ proceeding. Thank you.                                                  @
  @                                                                         @
  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
END_OF_BANNER
        echo >&2 # line break
        return 1
    else
        echo >&2 " [+] Git LFS-backed repositories seem to be properly checked out."
    fi
}

__activate_and_check_venv() {
    echo >&2 " [*] Activating the CLIP OS toolkit for the current shell environment..."
    if [ ! -f "${__path_to_runtime_dir}/bin/cosmk" ]; then
        echo >&2 " [!] Could not find 'cosmk'. Please build 'cosmk' by calling the \"setup.sh\" script located at the root of the toolkit directory."
        return 1
    fi
    PATH="${PATH}:$(realpath ${__path_to_runtime_dir}/bin)"

    # Add an environment variable to remember that this script has been sourced.
    export COSMK_ENV="true"

    if [ "${__shell_type}" = "zsh" ]; then
        PROMPT="(cosmk) ${PROMPT}"
    elif [ "${__shell_type}" = "bash" ]; then
        PS1="(cosmk) ${PS1}"
    else
        echo >&2 " [!] Unknown shell: could not register shell completion helpers."
        return 1
    fi
}

__cosmk_bash_completion() {
    echo >&2 " [*] Registering shell completion helpers for \"cosmk\" commands..."
    if [ "${__shell_type}" = "zsh" ]; then
        eval "$(cosmk --completion-script-zsh)"
    elif [ "${__shell_type}" = "bash" ]; then
        eval "$(cosmk --completion-script-bash)"
    else
        echo >&2 " [!] Unknown shell: could not register shell completion helpers."
        return 1
    fi
}

# Chain the functions and grab the first non-null return code "raised"
__activate_return_code__=0
__check_current_user_not_root \
    && __check_not_already_in_venv \
    && __check_shell_umask \
    && __check_lfs_repositories \
    && __activate_and_check_venv \
    && __cosmk_bash_completion \
        || __activate_return_code__="$?"

# Avoid polluting the user's shell environment with our internal stuff:
unset -v __shell_type \
    __path_to_myself \
    __path_to_toolkit \
    __path_to_repo_root \
    __path_to_runtime_dir
unset -f __check_current_user_not_root \
    __check_not_already_in_venv \
    __check_shell_umask \
    __check_lfs_repositories \
    __activate_and_check_venv \
    __cosmk_bash_completion

# propagate the return code
return "${__activate_return_code__}"

# vim: set ts=4 sts=4 sw=4 et ft=sh tw=79:
