# SPDX-License-Identifier: LGPL-2.1-or-later
# Copyright © 2017 ANSSI. All rights reserved.

[mypy]
# Follows imports in order to get type annotations from those external modules
# but do not raise errors if those imports do not define type annotations (Any
# will be assumed):
follow_imports = normal

# Suppress error messages about imports that cannot be resolved
ignore_missing_imports = True

# Use a cache for mypy?
incremental = False

# Enables strict Optional checks (i.e. None is not a compatible type with
# everything else).
# This is True by default but I prefer to enforce it because disabling this,
# will avoid a lot of type checks.
strict_optional = True

# Disallows usage of types that come from unfollowed imports (such types become
# aliases for Any)?
disallow_any_unimported = False

# Disallows all expressions in the module that have type Any?
# TODO/Improvement: Enable this and fix most of the error it will trigger.
disallow_any_expr = False

# Disallows functions that have Any in their signature after decorator
# transformation?
# TODO/Improvement: Enable this and fix most of the error it will trigger.
disallow_any_decorated = False

# Disallows explicit Any in type positions such as type annotations and generic
# type parameters?
# TODO/Improvement: Enable this and fix most of the error it will trigger.
# Beware, this will trigger a LOT of errors. ;)
disallow_any_explicit = False

# Disallows usage of generic types that do not specify explicit type
# parameters?
# TODO/Improvement: Enable this and fix most of the error it will trigger.
disallow_any_generics = False

# Reports an error whenever it encounters a partly annotated function
# definition.
disallow_incomplete_defs = True

# Disallows subclassing a value of type Any. See –disallow-subclassing-any
# option?
disallow_subclassing_any = True

# Disallows calling functions without type annotations from functions with type
# annotations?
disallow_untyped_calls = True

# Disallows defining functions without type annotations or with incomplete type
# annotations?
disallow_untyped_defs = True

# Stops treating arguments with a None default value as having an implicit
# Optional[...] type.
no_implicit_optional = True

# Shows errors for missing return statements on some execution paths?
warn_no_return = True

# Warns when returning a value with type Any from a function declared with a
# non-Any return type?
warn_return_any = True

# Warns about unneeded # type: ignore comments?
warn_unused_ignores = True
