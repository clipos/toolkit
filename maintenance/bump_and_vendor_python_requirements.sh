#!/usr/bin/env bash
# SPDX-License-Identifier: LGPL-2.1-or-later
# Copyright Â© 2017-2018 ANSSI. All rights reserved.

# Safety settings: do not remove!
set -o errexit -o nounset -o pipefail

# Get the basename of this program and the directory path to itself:
readonly PROGNAME="${BASH_SOURCE[0]##*/}"
readonly PROGPATH="$(realpath "${BASH_SOURCE[0]%/*}")"

# Full path to the repo root dir:
readonly TOOLKIT="$(realpath "${PROGPATH}/..")"
readonly REPOROOT="$(realpath "${TOOLKIT}/..")"

# Full path to the venv and the vendor dirs:
readonly TMP_VENV="${REPOROOT}/run/venv_bump.tmp"
readonly VENDOR="$(realpath "${REPOROOT}/assets/toolkit")"

# Check if not already in a virtualenv.
if [[ -n "${VIRTUAL_ENV:-}" ]]; then
    echo >&2 "Already in a virtualenv (${VIRTUAL_ENV:-}). Aborting."
    exit 1
fi

destroy_tmp_venv() {
    rm -rf "${TMP_VENV}"
}
trap destroy_tmp_venv EXIT

echo >&2 "Creating a temporary virtualenv to get pip working."
destroy_tmp_venv
python3 -m venv --symlinks "${TMP_VENV}"

# Avoid the message "You are using pip version X, however version Y is
# available.". We consider that we are always using a fairly recent version
# (although not the latest one) of pip brought by the Python package of the
# host Linux distribution.
cat <<EOF > "${TMP_VENV}/pip.conf"
[global]
    disable_pip_version_check = 1
EOF

echo >&2 "Install the CLIP OS toolkit in that temporary virtualenv."
"${TMP_VENV}/bin/pip" install --no-cache --no-binary :all: --editable '.[qa,docs]'

echo >&2 "Generate the new \"requirements.txt\" by freezing the package list."
cat > "${TOOLKIT}/requirements.txt" <<END
# DO NOT EDIT THIS FILE BY HAND!
# This file is auto-generated or updated by the script "${PROGNAME}".
# Date of generation: $(date --utc --iso=seconds)
#
# Developers: New dependencies to the CLIP OS toolkit must be declared in
# "setup.py" file either as a strict dependency (install_requires) or as an
# extra dependency (extras_require).

END
"${TMP_VENV}/bin/pip" freeze | sed -e '/^-e /d' >> "${TOOLKIT}/requirements.txt"

# Download from https://pypi.python.org/simple/ (the default) all the Python
# packages required for a usable development environment with cosmk:
mkdir -p "${VENDOR}"
# delete previous Python packages (keep hidden files and the README.md file):
shopt -s extglob nullglob
rm -f "${VENDOR}/"!(README.md)
shopt -u extglob nullglob
"${TMP_VENV}/bin/pip" download --no-binary ':all:' -d "${VENDOR}" \
    -r "${TOOLKIT}/requirements.txt"

echo >&2 "Python package dependencies and vendored packages both updated."

# vim: set ts=4 sts=4 sw=4 et ft=sh:
