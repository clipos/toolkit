#!/usr/bin/env bash
# SPDX-License-Identifier: LGPL-2.1-or-later
# Copyright Â© 2017 ANSSI. All rights reserved.

# Safety settings: do not remove!
set -o errexit -o nounset -o pipefail

# Do not run as root
if [[ "${EUID}" == 0 ]]; then
    >&2 echo "[*] Do not run as root!"
    exit 1
fi

# Get the basename of this program and the directory path to itself:
readonly PROGNAME="${BASH_SOURCE[0]##*/}"
readonly PROGPATH="$(realpath "${BASH_SOURCE[0]%/*}")"

# Full path to the repo root dir:
readonly TOOLKIT="$(realpath "${PROGPATH}/..")"
readonly REPOROOT="$(realpath "${TOOLKIT}/..")"

# Full path to the venv and the vendor dirs:
readonly TMP_VENV="${REPOROOT}/run/venv_bump.tmp"
readonly VENDOR="$(realpath "${REPOROOT}/assets/toolkit")"

# Check if not already in a virtualenv.
if [[ -n "${VIRTUAL_ENV:-}" ]]; then
    echo >&2 "Already in a virtualenv (${VIRTUAL_ENV:-}). Aborting."
    exit 1
fi

destroy_tmp_venv() {
    rm -rf "${TMP_VENV}"
}
trap destroy_tmp_venv EXIT

echo >&2 "Creating a temporary virtualenv to get pip working."
destroy_tmp_venv
python3 -m venv --symlinks "${TMP_VENV}"

# With the command above (python3 -m venv ...), we "inherit" by default 3
# Python packages from the user's Linux distro: setuptools, pip and wheel.
# (Notice that this is the normal behavior of the venv module in order to
# provide ways for the user to install new packages in its freshly created
# venv). However this behavior can cause potential issues that we do not want
# to hear about (since we do not control the versions of those distro-provided
# packages). But given the fact that we intentionally provide and vendor
# **ALL** the packages to be installed in the virtualenv (including pip,
# setuptools and wheel), we can trick pip into reinstalling them (including
# itself) with **OUR** packages provided and vendored (and with thoroughly
# pinned versions).
"${TMP_VENV}/bin/pip" install --no-cache-dir --no-binary :all: \
    --upgrade --force-reinstall setuptools pip wheel

# [2019-04-02] Note/Hack: There is currently a bug in Pip 19 that prevent us
# from using the option "--no-binary :all:" with packages that make use of PEP
# 517 build system (e.g. flit), hence the "--no-use-pep517" flag below that
# will prevent Pip from trying to install such packages.
# This package restriction could be removed once the bug in Pip will be fixed,
# follow GitHub issue: https://github.com/pypa/pip/issues/6222
echo >&2 "Install the CLIP OS toolkit in that temporary virtualenv."
"${TMP_VENV}/bin/pip" install --no-cache-dir --no-binary :all: \
    --no-use-pep517 \
    --editable "${TOOLKIT}/.[qa]"

echo >&2 "Generate the new \"requirements.txt\" by freezing the package list."
cat > "${TOOLKIT}/requirements.txt" <<END
# DO NOT EDIT THIS FILE BY HAND!
# This file was auto-generated by the script "${PROGNAME}"
# on $(date +'%Y-%m-%d at %H:%M:%S %Z').
#
# Note to Python developers:
# New dependencies to the CLIP OS toolkit/cosmk must be declared in the
# "setup.py" file either as a strict or extra dependency, not here.

END
# Do not forget '--all' to tell "pip freeze" to include setuptools, pip and all
# the other packages that are vital to pip. This requirements.txt will be
# complete and will enable us to use the option "--no-build-isolation" when
# re-installing all those pacakges without depending on an external Python
# packages index such as PyPI.
"${TMP_VENV}/bin/pip" freeze --all | sed -e '/^-e /d' >> "${TOOLKIT}/requirements.txt"

# Download from https://pypi.python.org/simple/ (the default) all the Python
# packages required for a usable development environment with cosmk:
mkdir -p "${VENDOR}"
# delete previous Python packages (keep hidden files and the README.md file):
shopt -s extglob nullglob
rm -f "${VENDOR}/"!(README.md)
shopt -u extglob nullglob
"${TMP_VENV}/bin/pip" download --no-binary ':all:' -d "${VENDOR}" \
    -r "${TOOLKIT}/requirements.txt"

echo >&2 "Python package dependencies and vendored packages both updated."

# vim: set ts=4 sts=4 sw=4 et ft=sh:
